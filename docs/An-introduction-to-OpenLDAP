An introduction to OpenLDAP

1- Configuration:

The configuration is hard. Historically all Unix services had their configuration files saved in /etc/servicename/servicename.conf - an editable file that could be modified and, upon service restarting, used.
New versions of OpenLDAP use a different approach, called Online Configuration ("olc"). The difference with the old method of using slapd.conf is that the configuration happens in a "secret"/"private" branch of the database, while it is running. As a result, every change happen "online" (hence the name) and there is no need for service restart (thus with no downtime).
While it is possible to revert to old slapd.conf configuration method, that is not adviced since the developers of OpenLDAP are known for radical cut of legacy methods, i.e. some day suddenly the version of OpenLDAP will just stop working unless you use olc (so better start now and be prepared). 
What makes configuration truly hard, though, is that there is a lack of documentation on this new configuration system, both on various internet sources and on the official website.

However thankfully our hero has found a way to do everything needed, and with the add of puppet the situation is even better.

2- Structure

Forget tables, forget ER, forget MySQL. Fresh ground.
While all the world is used to MySQL, to Entity-Relationships, and to tables (which is more human-like thinking), this uses a different kind of structure. The structure resembles a tree (like a folder structure with documents), so we will have a top node, generally representing the organisation's domain name (so, in our case dc=aegee,dc=org -that put together give us aegee.org! don't worry about the dc and the equal signs).
Under such top node, generally we have organisational units (ou in jargon). The units are always depending on the organisation needs and thus there is no standard or good practice for that. Any node "stacks" on top of the other, such that the full path to the top node is read: as a result, the organisational unit "antennae" which contains all the antennae in AEGEE would be described as "ou=antennae,dc=aegee,dc=org". Similar point for every other "ou" in AEGEE, for instance commissions (ou=commissions,dc=aegee,dc=org).
Keeping going, sub-elements under such OUs are again identified by an attribute (not called "ou" this time, but "cn", standing for "common name"), and to reach a certain antenna (e.g. Genova) one would look for "cn=Genova" and stack all the rest, as previously said; the end result is that Genova is identified in the tree as "cn=Genova,ou=antennae,dc=aegee,dc=org".
There is (probably) no limit on how many levels the tree can have, although it is good to not put so many, because of how the search is performed.

3- How LDAP works

LDAP (Lightweight Directory Access Protocol) is not a database. It's a protocol, as the name says. A protocol to access directory systems: we don't truly care though, and we call our directory system/database LDAP just like the 90% of the internet.
This protocol is tuned for best performance in reading. It queries the directory in a simple way: 

 - given a base search (a base directory inside the structure)
 - given a set of attributes to return
 - given a query

it simply starts from the base search and go **through every child node**. If any of the children matches against the query, then the attributes of that child entry is returned. 
Note two things:
 -because the database performs good for read searches, it's not really expensive to iterate through it (and the iteration is automagically coming from the implementation of OpenLDAP)
 -the search result is generally limited to some results (1000?), therefore some caching mechanism should be used for larger databases. Also, this is the reason for which in theory it is not good to have too many levels in the tree.

Optionally, there can be given a parameter in order to limit the search - from the whole subtree to only the first-level children.

4- Object classes

Everything has a type, i.e. every entry has its own sets of attributes. They can be mandatory or optional. As example, a "person" must have its name attribute defined, but it's not necessary for it to have a picture. 


5- Referential integrity

Nope, nothing such. The user creates the database, the user knows how to use it and puts extra caution in doing that.
Optionally there are methods to create "dynamic groups", however. They can be used to group people dynamically, instead of "hardcoding" people in a group hoping that the information about them is actually present somewhere else in the database. This happens using an objectClass called "groupOfURLs", that creates an object which once accessed launches a query and returns the result of the query. 

6- Permissions

Setting "ACLs" (Access Control List) gives the administrator the possibility to manage permission. By default the Directory Service is (probably) readable by anyone, whether not logged, or logged in with anonymous binding (more on that soon). The good admin changes such permission using ACLs. Furthermore, ACLs set also which groups have what kind of privilege. The power of the ACLs is that they can also be used with Dynamic groups mentioned on point 5.

7- Anonymous binding

The authentication against LDAP is called "binding". For the binding to the database, the user provides the full path of the user in the tree and the associated password. However in real life scenarios the user will only know his username and password, without knowing about some sorcery called LDAP, yet about any tree. 
Indeed, typical front-end authentication systems only queries for user and pass. To have a successful binding, the back-end system has to know in advance the position of the user in the tree, but there may be cases where the back-end system does not really know where to look (i.e. the "user base search", as we called earlier, is not hardcoded). Therefore the back-end has to first *search* the directory system for an user name, then return the full path of said user. That search is only possible from an anonymous binding, since the general public ought be restricted to see quite everything on the system. 
In general terms, the anonymous binding is a grey area between being unauthenticated and authenticated, and it is used to provide small auxiliary services (such as just mentioned search).